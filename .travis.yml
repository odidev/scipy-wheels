language: c # or other C/C++ variants 
cache: ccache

env:
    global:
        - REPO_DIR=scipy
        # Also see DAILY_COMMIT below
        - BUILD_COMMIT=master
        - PLAT=x86_64
        - CYTHON_BUILD_DEP="Cython==0.29.14"
        - PYBIND11_BUILD_DEP="pybind11==2.4.3"
        - UNICODE_WIDTH=32
        - MANYLINUX_URL="https://5cf40426d9f06eb7461d-6fe47d9331aba7cd62fc36c7196769e4.ssl.cf2.rackcdn.com"
        - WHEELHOUSE_UPLOADER_USERNAME=travis-worker
        # Following generated with
        # travis encrypt -r MacPython/scipy-wheels WHEELHOUSE_UPLOADER_SECRET=<the api key>
        - secure:
            "fne+dO/N+Zv8pusPVO6S58p7lFWLDIwjXwf/IgBPxGSdDFEQVY8xl0+nGPNNzYZfmX/inBrb/3+8el9sggC+X7KG6mGmCtcpwems2sWn6XY5OQ+kWl8SEdDs2SiAsrieqbC3d1cmMoHyddX/YdGWVSdIji70nRER0j9wjNwYNlE="
        # Commit when running from master branch
        - DAILY_COMMIT=master

language: python
dist: bionic
services: docker
os: linux

jobs:
  exclude:
      # Exclude the default Python 3.5 build
      - python: 3.5
  include:
      - stage: build wheel
        os: linux
        env:
          - MB_PYTHON_VERSION=3.7
          - PLAT=i686
          - NP_BUILD_DEP=numpy==1.14.5
          - NP_TEST_DEP=numpy==1.14.5
          - CYTHON_BUILD_DEP="Cython"
        install:
          - echo "Install amd job testing if works"
        script: 
          - echo "script amd job testing if works"
        after_success: 
          - echo "after_success amd job testing if works"
         
      - os: linux
        arch: arm64
        env:
          - MB_PYTHON_VERSION=3.7
          - PLAT=aarch64
          - DOCKER_TEST_IMAGE=multibuild/xenial_arm64v8
          - DOCKER_IMAGE=quay.io/pypa/manylinux2014_${PLAT}
          - CYTHON_BUILD_DEP="Cython"
        script:
          - echo "Skipping script"
        workspaces:
          create:
            name: ws1
            paths:
              - scipy/dist
              - wheelhouse
        after_success:
          - echo "Skipping after success"
      - stage: test wheel
        env:
          - MB_PYTHON_VERSION=3.7
          - PLAT=aarch64
          - DOCKER_TEST_IMAGE=multibuild/xenial_arm64v8
          - DOCKER_IMAGE=quay.io/pypa/manylinux2014_${PLAT}
          - CYTHON_BUILD_DEP="Cython"
        arch: arm64
        workspaces:
          use: ws1
        install:
          - echo "Skipping install "
        script:
          - echo "Overiding script to get info if fails"
          - ls scipy/dist || true
          - ls wheelhouse || true
          - install_run $PLAT

before_install:
    - if [ "$TRAVIS_BRANCH" == "master" ]; then
          CONTAINER="pre-release";
          BUILD_COMMIT=${DAILY_COMMIT:-$BUILD_COMMIT};
      else
          CONTAINER=wheels;
          UPLOAD_ARGS="--no-update-index";
      fi
    - BUILD_DEPENDS="$NP_BUILD_DEP $CYTHON_BUILD_DEP $PYBIND11_BUILD_DEP"
    - TEST_DEPENDS="$NP_TEST_DEP pytest pytest-xdist pytest-faulthandler pytest-env"
    - source multibuild/common_utils.sh
    - source multibuild/travis_steps.sh
    - before_install

install:
    # Maybe get and clean and patch source
    - clean_code $REPO_DIR $BUILD_COMMIT
    - ./patch_code.sh $REPO_DIR
    - build_wheel $REPO_DIR $PLAT

script:
    - install_run $PLAT

after_success:
    # trigger an upload to the shared ecosystem
    # infrastructure at: https://anaconda.org/scipy-wheels-nightly
    # for cron jobs only (restricted to master branch once
    # per week)
    # SCIPY_WHEELS_NIGHTLY is a secret token
    # used in Travis CI config, originally
    # generated at anaconda.org for scipy-wheels-nightly
    - if [ "$TRAVIS_EVENT_TYPE" == "cron" ]; then
          ANACONDA_ORG="scipy-wheels-nightly";
          pip install git+https://github.com/Anaconda-Server/anaconda-client;
          anaconda -t ${SCIPY_WHEELS_NIGHTLY} upload --force -u ${ANACONDA_ORG} ${TRAVIS_BUILD_DIR}/wheelhouse/*.whl;
      fi
    # for merges (push events) we use the staging area instead;
    # SCIPY_STAGING_UPLOAD_TOKEN is a secret token used in Travis
    # CI config, originally generated at anaconda.org for
    # multibuild-wheels-staging
    - if [ "$TRAVIS_EVENT_TYPE" == "push" ]; then
          ANACONDA_ORG="multibuild-wheels-staging";
          pip install git+https://github.com/Anaconda-Server/anaconda-client;
          anaconda -t ${SCIPY_STAGING_UPLOAD_TOKEN} upload --force -u ${ANACONDA_ORG} ${TRAVIS_BUILD_DIR}/wheelhouse/*.whl;
      fi
      
